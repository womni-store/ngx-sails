{"version":3,"file":"sails-client.service.js","sourceRoot":"","sources":["../../src/sails-client/sails-client.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { IO_INSTANCE, SocketIOConnectOpts, SocketIOSocket, io } from '../io';\nimport { ISailsRequest, ISailsRequestOpts, ISailsResponse } from './interfaces';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { ISailsClientConfig } from './sails-client.config';\nimport { Observable } from 'rxjs';\nimport { Observer } from 'rxjs/Observer';\nimport { RequestMethod } from './enums';\nimport { SailsError } from './sails-response';\nimport { SailsRequest } from './sails-request';\nimport { Subject } from 'rxjs';\nimport { clean } from './utils';\n\nconst SAILS_IO_SDK_STRING = '__sails_io_sdk';\n\nconst SAILS_IO_SDK = {\n  language: 'javascript',\n  platform: 'browser',\n  version: '1.1.12',\n};\n\n@Injectable()\nexport class SailsClient {\n  private defaultHeaders: any;\n  private uri: string;\n  private configOptions: SocketIOConnectOpts;\n  private errorsSubject: Subject<SailsError>;\n\n  public io: SocketIOSocket;\n  public requestErrors: Observable<SailsError>;\n\n  constructor(config: ISailsClientConfig = {}, @Inject(IO_INSTANCE) ioInstance?: SocketIOSocket) {\n    const { uri, options } = this.getConfig(config);\n    if (config.headers) {\n      this.defaultHeaders = config.headers;\n    }\n    ioInstance ? (this.io = ioInstance) : (this.io = io(uri, options));\n    this.uri = uri;\n    this.configOptions = options;\n    this.errorsSubject = new Subject();\n    this.requestErrors = this.errorsSubject.asObservable();\n  }\n\n  get(url: string, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.GET, undefined, options);\n  }\n\n  post(url: string, body?: any, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.POST, body, options);\n  }\n\n  put(url: string, body?: any, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.PUT, body, options);\n  }\n\n  delete(url: string, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.DELETE, undefined, options);\n  }\n\n  options(url: string, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.OPTIONS, undefined, options);\n  }\n\n  head(url: string, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.HEAD, undefined, options);\n  }\n\n  patch(url: string, body: any, options?: ISailsRequestOpts): Observable<ISailsResponse> {\n    return this.sendRequest(url, RequestMethod.PATCH, body, options);\n  }\n\n  on(event: string): Observable<any> {\n    let nextFunc: (msg: any) => void;\n\n    return new Observable((obs: Observer<any>) => {\n      nextFunc = (msg: any) => obs.next(msg);\n      this.io.on(event, nextFunc);\n      return () => this.io.off(event, nextFunc);\n    });\n  }\n\n  get configuration() {\n    return <ISailsClientConfig>{\n      uri: this.uri,\n      headers: this.defaultHeaders,\n      options: this.configOptions,\n    };\n  }\n\n  private sendRequest(\n    url: string,\n    method: RequestMethod,\n    data?: any,\n    options: ISailsRequestOpts = {}\n  ) {\n    let request: ISailsRequest = { url, method, data };\n    Object.assign(request, {\n      params: options.params || options.search,\n      headers: Object.assign({}, this.defaultHeaders, options.headers),\n    });\n    return SailsRequest.send(clean(request), this.io, this.errorsSubject);\n  }\n\n  private getConfig(config: ISailsClientConfig) {\n    const options: SocketIOConnectOpts = { transports: [ 'websocket' ] };\n\n    let uri = config.uri,\n      query: any = {};\n\n    Object.assign(\n      query,\n      Object.keys(SAILS_IO_SDK).forEach(\n        k => (query[`${SAILS_IO_SDK_STRING}_${k}`] = SAILS_IO_SDK[k])\n      )\n    );\n\n    if (config.options && config.options.query) {\n      Object.assign(query, config.options.query);\n    }\n\n    Object.assign(options, config.options, { query });\n\n    return { uri, options };\n  }\n}\n"]}